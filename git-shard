#!/bin/bash
# shellcheck disable=SC2155

set -euo pipefail
# set -x


# Bash errors handler
function errexit() {
  local err=$?
  set +o xtrace
  local code="${1:-1}"
  echo "Error in ${BASH_SOURCE[1]}:${BASH_LINENO[0]}. '${BASH_COMMAND}' exited with status $err"
  # Print out the stack trace described by $function_stack
  if [ ${#FUNCNAME[@]} -gt 2 ]
  then
    echo "Call tree:"
    for ((i=1;i<${#FUNCNAME[@]}-1;i++))
    do
      echo " $i: ${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]} ${FUNCNAME[$i]}(...)"
    done
  fi
  echo "Exiting with status ${code}"
  exit "${code}"
}
trap 'errexit' ERR
set -o errtrace




MAINREPO=$(git rev-parse --show-toplevel)
MAINREPOGIT=$(git rev-parse --git-dir)
if [[ "${OS:-}" == "Windows_NT" ]]; then
	MAINREPO="$(cygpath -u "$MAINREPO")"
	MAINREPOGIT="$(cygpath -u "$MAINREPOGIT")"
fi
function get-shard-repo-path(){
	local shard_path="$1"
	if [[ "$shard_path" == "." ]]; then
		echo "$MAINREPOGIT/shards/__root"
	else
		echo "$MAINREPOGIT/shards/$shard_path"
	fi
}

function git-main(){
	git --git-dir="$MAINREPOGIT" "$@"
}
function git-sub(){
	local shard_path="$1"
	shift
	git --git-dir="$(get-shard-repo-path "$shard_path")" --work-tree="$MAINREPO/$shard_path" "$@"
}

function get-shards-path(){
	while read -r SHARD; do
		echo "$SHARD" | sed -E 's|^shards\.(.*)\.upstream=.*|\1|'
	done < <(git-main config --local -l | grep -E '^shards\..*\.upstream' || true)
}

function get-shard-exists(){
	local shard_path="$1"
	if [[ "$shard_path" == "*" ]]; then
		if git-main config --local -l | grep -E '^shards\..*\.upstream' >/dev/null; then
			echo 1
		else
			echo 0
		fi
	else
		if git-main config --local "shards.$shard_path.upstream" >/dev/null; then
			echo 1
		else
			echo 0
		fi
	fi
}
function get-oldest-main-commit(){
	# TODO: find a cleaner solution for returning the oldest commit
	if [ -z "$1" ] || { [ -n "$2" ] && [ -n "$(git-main log "$1..$2")" ] ; }; then
		echo "$1"
	else
		echo "$2"
	fi
}
function get-latest-main-commit(){
	# TODO: find a cleaner solution for returning the latest commit
	if [ -z "$1" ] || { [ -n "$2" ] && [ -n "$(git-main log "$1..$2")" ] ; }; then
		echo "$2"
	else
		echo "$1"
	fi
}
function get-latest-shard-commit(){
	local shard_path="$1"
	shift
	# TODO: find a cleaner solution for returning the latest commit
	if [ -z "$1" ] || { [ -n "$2" ] && [ -n "$(git-sub "$shard_path" log "$1..$2")" ] ; }; then
		echo "$2"
	else
		echo "$1"
	fi
}

function get-shard-last-mainref(){
	local shard_path="$1"

	local last_inspected
	last_inspected=$(git-main config --local "shards.$shard_path.commit")
	local last_commited_in_shard
	last_commited_in_shard=$(git-sub "$shard_path" show HEAD -q --format='%b' 2>/dev/null | grep -oE "^SHARD-MAINREF: \w+$" | cut -d ' ' -f 2 || true)
	local last_commited_in_main
	last_commited_in_main=$(git-main log -q --format='%b%H' 2>/dev/null | grep -E "^SHARD-COMMIT: $shard_path:\w+$" -A1 | head -n2 | tail -n1 || true)

	local latest
	latest=$(get-latest-main-commit "$last_inspected" "$last_commited_in_shard")
	get-latest-main-commit "$latest" "$last_commited_in_main"
}
function get-shard-last-shardref(){
	local shard_path="$1"

	local last_commited_in_shard
	last_commited_in_shard=$(git-sub "$shard_path" log -q --format='%b%H' 2>/dev/null | grep -E "^SHARD-MAINREF: \w+$" -A1 | head -n2 | tail -n1 || true)
	local last_commited_in_main
	last_commited_in_main=$(git-main log -q --format='%b' 2>/dev/null | grep -oE "^SHARD-COMMIT: $shard_path:\w+$" | cut -d ':' -f 3 || true)

	get-latest-shard-commit "$shard_path" "$last_commited_in_shard" "$last_commited_in_main"
}

function expand-shard-spec(){
	if [[ "$1" == "*" ]]; then
		get-shards-path
	else
		echo "$1"
	fi
}

function append-patch-message(){
	local blanklines=0
	local forward=0
	while IFS= read -r line; do
		if (( forward == 0 )); then
			if [ -z "$line" ]; then
				blanklines=$((blanklines + 1))
				if (( blanklines == 2)); then
					echo -e "$1"
					echo
					forward=1
				fi
			else
				blanklines=0
			fi
		fi
		echo "$line"
	done
}

function get-push-range(){
	local range="$1"
	if [ -z "$range" ]; then
		# Find earliest commit
		local oldest=""
		while read -r SHARDPATH; do
			local commit
			commit=$(get-shard-last-mainref "$SHARDPATH")

			if [ -z "$oldest" ] || [[ $(get-oldest-main-commit "$oldest" "$commit") == "$commit" ]]; then
				local oldest=$commit
			fi
		done < <(get-shards-path)

		if [ -z "$oldest" ]; then
			echo "HEAD^-"
		else
			echo "$oldest^..HEAD"
		fi

	else
		# use provided range
		if [[ "$range" != *..* ]]; then
			echo "$range^-"
		else
			echo "$range"
		fi
	fi
}

SUBCOMMAND="${1:-help}"
case "$SUBCOMMAND" in -h|--help|help)
	echo "Usage: git shard subcommand [options]"
	echo
	echo "Available subcommand:"
	echo " init   Register a directory as a shard and initialize/clone its associated git repository"
	echo " list   List all registered shards"
	echo " remove Un-register shards"
	echo " files  Limit an existing shard to a set of files and directories"
	echo " push   Copy commits from the main repository to each shard"
	echo " pull   Copy commits from a given shard into the main repository"
	echo " exec   Executes a git command inside a shard (do not repeat the 'git' command)"
	echo " help   Display this message"
	exit 0
esac

shift

case "$SUBCOMMAND" in
	init)
		BRANCH=$(git-main rev-parse --abbrev-ref HEAD)
		UPSTREAM=""
		SHARDPATH=""

		while (( $# > 0 )); do
			case "$1" in
				-h|--help)
					echo "Usage: git shard init [options] shard_path"
					echo
					echo "Register a directory as a shard and initialize/clone its associated git repository."
					echo "The shard is versioned using a bare repository stored in .git/shards/"
					echo
					echo "Arguments:"
					echo " shard_path       Path of the directory to track for creating the shard from"
					echo
					echo "Options:"
					echo " --upstream URI   Git clone URI if the shard repository is already versioned somewhere"
					echo " --branch BRANCH  Branch of the main repository that will be bound to the master branch of the shard. Defaults to the current branch of the main repository."
					exit 0
					;;
				--origin) shift; UPSTREAM="$1" ;;
				--origin=*) UPSTREAM="${1#*=}" ;;
				--branch) shift; BRANCH="$1" ;;
				--branch=*) BRANCH="${1#*=}" ;;
				*)
					if [ -z "$SHARDPATH" ]; then
						SHARDPATH="$1"
					else
						echo "Too many shard_path arguments"
						exit 1
					fi
					;;
			esac

			shift
		done

		# Assertions
		[ -d "$SHARDPATH" ] || (echo "$SHARDPATH does not exist / is not a directory" && exit 1)
		(( $(get-shard-exists "$SHARDPATH") == 0 )) || (echo "A shard already exists for path $SHARDPATH" && exit 1)

		SHARDPATH=$(realpath --relative-to="$MAINREPO" "$SHARDPATH")
		SHARDSTORPATH="$(get-shard-repo-path "$SHARDPATH")"

		# Clone/create shard repository
		mkdir -p "$SHARDSTORPATH"
		if [[ "$UPSTREAM" != "" ]]; then
			git clone --bare "$UPSTREAM" "$SHARDSTORPATH"

			LAST_MAIN_COMMIT=$(git-sub "$SHARDPATH" show HEAD -q --format='%b' | grep -oE "^SHARD-MAINREF: \w+$" | cut -d ' ' -f 2)
			git-main config --local "shards.$SHARDPATH.commit" "$LAST_MAIN_COMMIT"
		else
			git init --bare "$SHARDSTORPATH"
			git-main config --local "shards.$SHARDPATH.commit" ""
		fi

		# Add shard to git config
		git-main config --local "shards.$SHARDPATH.upstream" "$UPSTREAM"
		git-main config --local "shards.$SHARDPATH.branch" "$BRANCH"

		echo "Added shard $SHARDPATH"

		CURR_BRANCH="$(git-main rev-parse --abbrev-ref HEAD)"
		if [[ "$CURR_BRANCH" != "$BRANCH" ]]; then
			echo "Note: you are not currently on the tracked branch '$CURR_BRANCH' for this shard."
			echo "Execute \`git checkout '$BRANCH'\` to switch to the associated branch."
		fi
		;;

	list)
		while read -r SHARD_PATH; do
			UPSTREAM=$(git-main config --local --get "shards.$SHARD_PATH.upstream")
			BRANCH=$(git-main config --local --get "shards.$SHARD_PATH.branch")
			echo "$SHARD_PATH=>$UPSTREAM@$BRANCH"
		done < <(get-shards-path)
		;;

	remove)
		case "${1:-help}" in -h|--help|help)
			echo "Usage: git shard remove shard_path [more_shard_path...]"
			echo
			echo "Un-register one or more shards and remove its associated git repository from .git/shards/"
			echo
			echo "Arguments:"
			echo " shard_path       Path of the shard to remove"
			echo " more_shard_path  Same as shard_path"
			exit 0
		esac

		for SHARDSPEC in "$@"; do
			while read -r SHARDPATH; do
				(( $(get-shard-exists "$SHARDPATH") == 1 )) || (echo "There is no shard for path $SHARDPATH" && exit 1)

				rm -rf "$(get-shard-repo-path "$SHARDPATH")"
				git config --local --remove-section "shards.$SHARDPATH"

			done < <(expand-shard-spec "$SHARDSPEC")
		done
		;;

	files)
		case "${1:-help}" in -h|--help|help)
			echo "Usage: git shard files shard_path command [path_spec]"
			echo
			echo "Limits a shard to only track a list of files and directories."
			echo "Once at least one path is defined, the shard repository will ignore any other file."
			echo
			echo "Arguments:"
			echo " shard_path  Path of the shard"
			echo " command     either add, remove, get, set"
			echo " path_spec   Path to a file or directory. Can contain wildcards for matching multiple files"
			exit 0
		esac
		SHARDSPEC="$1"
		COMMAND="$2"
		VALUE="${3:-}"

		(( $(get-shard-exists "$SHARDSPEC") == 1 )) || (echo "There is no shard for path $SHARDSPEC" && exit 1)

		while read -r SHARDPATH; do
			case "$COMMAND" in
				get)
					git-main config --local "shards.$SHARDPATH.files"
					;;
				set)
					git-main config --local "shards.$SHARDPATH.files" "$VALUE"
					;;
				add)
					CURRVAL=$(git-main config --local "shards.$SHARDPATH.files" || true)
					if [ -n "$CURRVAL" ]; then
						CURRVAL="$CURRVAL:"
					fi
					git-main config --local "shards.$SHARDPATH.files" "$CURRVAL$VALUE"
					;;
				remove)
					CURRVAL=$(git-main config --local "shards.$SHARDPATH.files" || true)
					CURRVAL=$(echo "$CURRVAL" | tr ":" "\n" | grep -vxF "$VALUE" | tr "\n" ":" | sed 's/:$//')
					git-main config --local "shards.$SHARDPATH.files" "$CURRVAL"
					;;
				*)
					echo "Unknown sub-command $COMMAND"
					exit 1
					;;
			esac

		done < <(expand-shard-spec "$SHARDSPEC")
		;;

	push)
		SHARDSPEC="*"
		RANGE=""
		COMMIT_ARGS=()

		while (( $# > 0 )); do
			case "$1" in
				-h|--help|help)
					echo "Usage: git shard push [shard_path] [options]"
					echo
					echo "Copy commits from the main repository to each shard"
					echo
					echo "Arguments:"
					echo " shard_path  Path of the shard"
					echo " options     See 'Options' below."
					echo
					echo "Options:"
					echo " --range RANGE  Shard commits to copy. Cannot be set with '*' shard_path. If not provided, automatically detects missing commits."
					echo " *              Other options are forwarded to the 'git am' command"
					exit 0
					;;
				--range) shift; RANGE="$1" ;;
				--range=*) RANGE="${1#*=}" ;;
				*)
					if [ -z "$SHARDSPEC" ] && [[ "$1" != -* ]]; then
						SHARDSPEC="$1"
					else
						COMMIT_ARGS+=("$1")
					fi
					;;
			esac

			shift
		done

		RANGE=$(get-push-range "$RANGE")
		if [ -z "$RANGE" ]; then
			echo "No commits to push to shards"
			exit 0
		fi

		COMMITS_TO_PUSH=$(git-main log --format="%H" "$RANGE" | tac)
		if [ -z "$COMMITS_TO_PUSH" ]; then
			echo "No commits to push to shards for range $RANGE"
			exit 0
		fi

		# Stash changes if any
		if [ -n "$(git-main status --porcelain)" ]; then
			git-main stash push -u -m "Pre git-shard commit cleaning"
			trap "git-main stash pop -q" EXIT
		fi

		MAINREPO_BRANCH=$(git-main rev-parse --abbrev-ref HEAD)


		# Checkout and replicate each commit in each shard
		for HASH in $COMMITS_TO_PUSH; do
			echo "=========================================="
			COMMIT_INFO=$(git-main show -s --format='"%s" (%h)' "$HASH")
			echo "Copying commit $COMMIT_INFO to shards"
			echo "=========================================="

			while read -r SHARD_PATH; do
				echo "=> $SHARD_PATH"

				# Check branch tracking
				SHARD_TRACKING_BRANCH=$(git-main config --local "shards.$SHARD_PATH.branch")
				if [[ "$SHARD_TRACKING_BRANCH" != "$MAINREPO_BRANCH" ]]; then
					echo "  Untracked branch: this shard tracks '$SHARD_TRACKING_BRANCH'"
					continue
				fi

				# Check shard dir exists
				if [ ! -d "$SHARD_PATH" ]; then
					echo "  Shard path is not a directory / does not exist"
					continue
				fi

				SHARD_COMMIT=$(get-shard-last-mainref "$SHARD_PATH")
				if [[ -z "$SHARD_COMMIT" ]]; then
					# First commit of the shard. Add everything

					# Checkout main repo to get the shard at the correct state
					git-main checkout "$HASH" 2>/dev/null

					# Stage files
					# Note: `git add` adds files relative to the repo work tree
					FILES=$(git-main config --local "shards.$SHARD_PATH.files" || true)
					if [ -n "$FILES" ]; then
						# Only files matched by shards.X.files
						while read -r file; do
							git-sub "$SHARD_PATH" add "$file"
						done < <(tr ":" "\n" <<< "$FILES")
					else
						# While directory
						git-sub "$SHARD_PATH" add .
					fi

					# Commit
					git-sub "$SHARD_PATH" commit \
						--message="$(printf "Initial shard commit\n\nSHARD-MAINREF: %s" "$HASH")" \
						"${COMMIT_ARGS[@]}"

					# Get back to the previous main branch
					git-main checkout - 2>/dev/null
				else
					# Patch current shard repo
					if [[ "$HASH" == "$SHARD_COMMIT" || "$(get-latest-main-commit "$SHARD_COMMIT" "$HASH")" != "$HASH" ]]; then
						# Current commit is older that the last commit for this shard
						echo "  Commit already copied"
					else
						PATCH=$(git-main format-patch --patch --no-stat --stdout --relative="$SHARD_PATH" "$HASH^-")
						if [ -z "$PATCH" ]; then
							# Resulting patch is empty
							echo "Not affected by changes"
							git-main config --local "shards.$SHARD_PATH.commit" "$HASH"
						else
							AM_ARGS=()
							FILES=$(git-main config --local "shards.$SHARD_PATH.files" || true)
							if [ -n "$FILES" ]; then
								# Filter to apply the patch to only shard files
								while read -r file; do
									AM_ARGS+=("--include=$file")
								done < <(tr ":" "\n" <<< "$FILES")
							fi

							# Reset the shard as a clean state
							git-sub "$SHARD_PATH" reset --hard >/dev/null
							git-sub "$SHARD_PATH" clean -f >/dev/null

							# Apply commit
							echo "$PATCH" \
								| append-patch-message "SHARD-MAINREF: $HASH" \
								| git-sub "$SHARD_PATH" am "${AM_ARGS[@]}" "${COMMIT_ARGS[@]}"
						fi
					fi
				fi

				# Update last inspected commit for shard
				git-main config --local "shards.$SHARD_PATH.commit" "$HASH"
			done < <(get-shards-path)
		done
		;;

	pull)
		SHARDSPEC=""
		AM_ARGS=()
		RANGE=""
		while (( $# > 0 )); do
			case "$1" in
				-h|--help)
					echo "Usage: git shard pull [shard_path] [options]"
					echo
					echo "Copy commits from the given shard into the main repository"
					echo
					echo "Arguments:"
					echo " shard_path  Optional path of the shard. '*' for all shards. Default: '*'"
					echo " options     See 'Options' below."
					echo
					echo "Options:"
					echo " --range RANGE  Shard commits to copy. Cannot be set with '*' shard_path. If not provided, automatically detects missing commits."
					echo " *              Other options are forwarded to the 'git am' command"
					exit 0
					;;
				--range) shift; RANGE="$1" ;;
				--range=*) RANGE="${1#*=}" ;;
				*)
					if [ -z "$SHARDSPEC" ] && [[ "$1" != -* ]]; then
						SHARDSPEC="$1"
					else
						AM_ARGS+=("$1")
					fi
					;;
			esac
			shift
		done

		if [ -n "$RANGE" ] && [[ "$SHARDSPEC" == "*" ]]; then
			echo "Cannot use --range with multiple shards"
			exit 1
		fi

		if [ -z "$SHARDSPEC" ]; then
			SHARDSPEC="*"
		fi

		MAINREPO_BRANCH=$(git-main rev-parse --abbrev-ref HEAD)

		# Loop over each shard spec
		while read -r SHARD_PATH; do
			echo "=> $SHARD_PATH"

			# Check branch tracking
			SHARD_TRACKING_BRANCH=$(git-main config --local "shards.$SHARD_PATH.branch")
			if [[ "$SHARD_TRACKING_BRANCH" != "$MAINREPO_BRANCH" ]]; then
				echo "  Untracked branch: this shard tracks '$SHARD_TRACKING_BRANCH'"
				continue
			fi

			if [ -z "$RANGE" ]; then
				# Detect range from commits
				SHARD_COMMIT="$(get-shard-last-shardref "$SHARD_PATH")..HEAD"
			else
				# use provided range
				SHARD_COMMIT="$RANGE"
			fi

			COMMITS=$(git-sub "$SHARD_PATH" log --format="%H" "$SHARD_COMMIT" | tac)
			if [ -z "$COMMITS" ]; then
				echo "  No commits to pull"
			else
				while read -r COMMITHASH; do
					# Reproduce commit in main repo using patch files
					COMMIT_INFO=$(git-sub "$SHARD_PATH" show -s --format='"%s" (%h)' "$COMMITHASH")
					echo "=========================================="
					echo "Copying commit $COMMIT_INFO from $SHARD_PATH to main repo"
					echo "=========================================="

					git-sub "$SHARD_PATH" format-patch --patch --no-stat --stdout "$COMMITHASH^-" \
						| append-patch-message "SHARD-COMMIT: $SHARD_PATH:$COMMITHASH" \
						| git-main am --directory="$SHARD_PATH" "${AM_ARGS[@]}"

				done < <(echo "$COMMITS")
			fi

		done < <(expand-shard-spec "$SHARDSPEC")
		;;

	exec)
		case "${1:-help}" in -h|--help|help)
			echo "Usage: git shard exec shard_path [git_args]"
			echo
			echo "Executes a git command inside a shard (do not repeat the 'git' command)"
			echo
			echo "Arguments:"
			echo " shard_path  Path of the shard. '*' for all shards"
			echo " git_args    Args passed to the git command to execute"
			exit 0
		esac

		SHARD_PATH="$1"
		shift

		if [[ "$SHARD_PATH" == "*" ]]; then
			# Exec for each shard
			while read -r SHARD_PATH; do
				echo "=> $SHARD_PATH"
				if [ ! -d "$SHARD_PATH" ]; then
					echo "  Shard path is not a directory / does not exist"
					continue
				fi
				git-sub "$SHARD_PATH" "$@" || true
			done < <(expand-shard-spec "$SHARD_PATH")
		else
			# Exec for a specific shard
			if (( ! $(get-shard-exists "$SHARD_PATH") )); then
				echo "No shard for $SHARD_PATH"
				exit 1
			fi
			if [ ! -d "$SHARD_PATH" ]; then
				echo "  Shard path is not a directory / does not exist"
				exit 1
			fi
			git-sub "$SHARD_PATH" "$@"
		fi
		;;

	*)
		echo "Unknown command: $SUBCOMMAND"
		exit 1

esac

